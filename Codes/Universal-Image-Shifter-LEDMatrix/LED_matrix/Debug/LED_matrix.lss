
LED_matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a1  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000625  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e3  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000229  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <resetRows>:
#include <stdio.h>
#define F_CPU 1000000
#include <util/delay.h>

// create your image here and don't worry about anything else
void resetRows(unsigned char rowSetup[]){
  6c:	fc 01       	movw	r30, r24
	rowSetup [0] = 0b00000001;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	80 83       	st	Z, r24
	rowSetup [1] = 0b00000010;
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	81 83       	std	Z+1, r24	; 0x01
	rowSetup [2] = 0b00000100;
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	82 83       	std	Z+2, r24	; 0x02
	rowSetup [3] = 0b00001000;
  7a:	88 e0       	ldi	r24, 0x08	; 8
  7c:	83 83       	std	Z+3, r24	; 0x03
	rowSetup [4] = 0b00010000;
  7e:	80 e1       	ldi	r24, 0x10	; 16
  80:	84 83       	std	Z+4, r24	; 0x04
	rowSetup [5] = 0b00100000;
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	85 83       	std	Z+5, r24	; 0x05
	rowSetup [6] = 0b01000000;
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	86 83       	std	Z+6, r24	; 0x06
	rowSetup [7] = 0b00000000;
  8a:	17 82       	std	Z+7, r1	; 0x07
  8c:	08 95       	ret

0000008e <resetCols>:
}

void resetCols(unsigned char colSetup[]){
  8e:	fc 01       	movw	r30, r24
	colSetup [0] = 0b00111100;
  90:	9c e3       	ldi	r25, 0x3C	; 60
  92:	90 83       	st	Z, r25
	colSetup [1] = 0b00000100;
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	81 83       	std	Z+1, r24	; 0x01
	colSetup [2] = 0b00000100;
  98:	82 83       	std	Z+2, r24	; 0x02
	colSetup [3] = 0b00111100;
  9a:	93 83       	std	Z+3, r25	; 0x03
	colSetup [4] = 0b00000100;
  9c:	84 83       	std	Z+4, r24	; 0x04
	colSetup [5] = 0b00000100;
  9e:	85 83       	std	Z+5, r24	; 0x05
	colSetup [6] = 0b00111100;
  a0:	96 83       	std	Z+6, r25	; 0x06
	colSetup [7] = 0b00000000;
  a2:	17 82       	std	Z+7, r1	; 0x07
  a4:	08 95       	ret

000000a6 <renderImage>:
}

void renderImage(int shift){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	60 97       	sbiw	r28, 0x10	; 16
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	8c 01       	movw	r16, r24
	
	unsigned char delayMS = 3;
	
	unsigned char rowSetup [8];
	unsigned char colSetup [8];
	resetCols(colSetup);
  bc:	ce 01       	movw	r24, r28
  be:	09 96       	adiw	r24, 0x09	; 9
  c0:	0e 94 47 00 	call	0x8e	; 0x8e <resetCols>
	resetRows(rowSetup);
  c4:	ce 01       	movw	r24, r28
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <resetRows>

	
	while (1)
	{
		for(int i = 0; i < 7; i++){
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	21 c0       	rjmp	.+66     	; 0x114 <renderImage+0x6e>
			for(int j=0; j<50; j++){
				PORTB = rowSetup[i];
  d2:	e1 e0       	ldi	r30, 0x01	; 1
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ec 0f       	add	r30, r28
  d8:	fd 1f       	adc	r31, r29
  da:	e4 0f       	add	r30, r20
  dc:	f5 1f       	adc	r31, r21
  de:	80 81       	ld	r24, Z
  e0:	88 bb       	out	0x18, r24	; 24
				PORTD = ~colSetup[i];
  e2:	e9 e0       	ldi	r30, 0x09	; 9
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ec 0f       	add	r30, r28
  e8:	fd 1f       	adc	r31, r29
  ea:	e4 0f       	add	r30, r20
  ec:	f5 1f       	adc	r31, r21
  ee:	80 81       	ld	r24, Z
  f0:	80 95       	com	r24
  f2:	82 bb       	out	0x12, r24	; 18

	
	while (1)
	{
		for(int i = 0; i < 7; i++){
			for(int j=0; j<50; j++){
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	02 c0       	rjmp	.+4      	; 0xfe <renderImage+0x58>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	22 33       	cpi	r18, 0x32	; 50
 100:	31 05       	cpc	r19, r1
 102:	3c f3       	brlt	.-50     	; 0xd2 <renderImage+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8d ee       	ldi	r24, 0xED	; 237
 106:	92 e0       	ldi	r25, 0x02	; 2
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <renderImage+0x62>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <renderImage+0x68>
 10e:	00 00       	nop
	resetRows(rowSetup);

	
	while (1)
	{
		for(int i = 0; i < 7; i++){
 110:	4f 5f       	subi	r20, 0xFF	; 255
 112:	5f 4f       	sbci	r21, 0xFF	; 255
 114:	47 30       	cpi	r20, 0x07	; 7
 116:	51 05       	cpc	r21, r1
 118:	84 f3       	brlt	.-32     	; 0xfa <renderImage+0x54>
				PORTD = ~colSetup[i];
			}
			_delay_ms(delayMS);
		}

		if(shift == 1){
 11a:	01 30       	cpi	r16, 0x01	; 1
 11c:	11 05       	cpc	r17, r1
 11e:	c9 f4       	brne	.+50     	; 0x152 <renderImage+0xac>
 120:	13 c0       	rjmp	.+38     	; 0x148 <renderImage+0xa2>
			for(int i = 0; i < 7; i++){
				colSetup[i] = (colSetup[i] << 1 | colSetup[i] >> 7);
 122:	e9 e0       	ldi	r30, 0x09	; 9
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	e4 0f       	add	r30, r20
 12c:	f5 1f       	adc	r31, r21
 12e:	20 81       	ld	r18, Z
 130:	82 2f       	mov	r24, r18
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	22 1f       	adc	r18, r18
 13a:	22 27       	eor	r18, r18
 13c:	22 1f       	adc	r18, r18
 13e:	82 2b       	or	r24, r18
 140:	80 83       	st	Z, r24
			}
			_delay_ms(delayMS);
		}

		if(shift == 1){
			for(int i = 0; i < 7; i++){
 142:	4f 5f       	subi	r20, 0xFF	; 255
 144:	5f 4f       	sbci	r21, 0xFF	; 255
 146:	02 c0       	rjmp	.+4      	; 0x14c <renderImage+0xa6>
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	47 30       	cpi	r20, 0x07	; 7
 14e:	51 05       	cpc	r21, r1
 150:	44 f3       	brlt	.-48     	; 0x122 <renderImage+0x7c>
				colSetup[i] = (colSetup[i] << 1 | colSetup[i] >> 7);
			}
		}
		
		if(shift == 2){
 152:	02 30       	cpi	r16, 0x02	; 2
 154:	11 05       	cpc	r17, r1
 156:	b9 f4       	brne	.+46     	; 0x186 <renderImage+0xe0>
 158:	11 c0       	rjmp	.+34     	; 0x17c <renderImage+0xd6>
			for(int i = 0; i < 7; i++){
				colSetup[i] = (colSetup[i] >> 1 | colSetup[i] << 7);
 15a:	e9 e0       	ldi	r30, 0x09	; 9
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 81       	ld	r24, Z
 168:	90 e8       	ldi	r25, 0x80	; 128
 16a:	89 9f       	mul	r24, r25
 16c:	a0 01       	movw	r20, r0
 16e:	11 24       	eor	r1, r1
 170:	86 95       	lsr	r24
 172:	84 2b       	or	r24, r20
 174:	80 83       	st	Z, r24
				colSetup[i] = (colSetup[i] << 1 | colSetup[i] >> 7);
			}
		}
		
		if(shift == 2){
			for(int i = 0; i < 7; i++){
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	02 c0       	rjmp	.+4      	; 0x180 <renderImage+0xda>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	27 30       	cpi	r18, 0x07	; 7
 182:	31 05       	cpc	r19, r1
 184:	54 f3       	brlt	.-44     	; 0x15a <renderImage+0xb4>
				colSetup[i] = (colSetup[i] >> 1 | colSetup[i] << 7);
			}
		}
		
		if(shift == 3){
 186:	03 30       	cpi	r16, 0x03	; 3
 188:	11 05       	cpc	r17, r1
 18a:	b9 f4       	brne	.+46     	; 0x1ba <renderImage+0x114>
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <renderImage+0x10a>
			for(int i = 0; i < 7; i++){
				rowSetup[i] = (rowSetup[i] >> 1 | rowSetup[i] << 7);
 18e:	e1 e0       	ldi	r30, 0x01	; 1
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ec 0f       	add	r30, r28
 194:	fd 1f       	adc	r31, r29
 196:	e2 0f       	add	r30, r18
 198:	f3 1f       	adc	r31, r19
 19a:	80 81       	ld	r24, Z
 19c:	90 e8       	ldi	r25, 0x80	; 128
 19e:	89 9f       	mul	r24, r25
 1a0:	a0 01       	movw	r20, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	86 95       	lsr	r24
 1a6:	84 2b       	or	r24, r20
 1a8:	80 83       	st	Z, r24
				colSetup[i] = (colSetup[i] >> 1 | colSetup[i] << 7);
			}
		}
		
		if(shift == 3){
			for(int i = 0; i < 7; i++){
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <renderImage+0x10e>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	27 30       	cpi	r18, 0x07	; 7
 1b6:	31 05       	cpc	r19, r1
 1b8:	54 f3       	brlt	.-44     	; 0x18e <renderImage+0xe8>
				rowSetup[i] = (rowSetup[i] >> 1 | rowSetup[i] << 7);
			}
		}
		
		
		if(shift == 4){
 1ba:	04 30       	cpi	r16, 0x04	; 4
 1bc:	11 05       	cpc	r17, r1
 1be:	c9 f4       	brne	.+50     	; 0x1f2 <renderImage+0x14c>
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <renderImage+0x142>
			for(int i = 0; i < 7; i++){
				rowSetup[i] = (rowSetup[i] << 1 | rowSetup[i] >> 7);
 1c2:	e1 e0       	ldi	r30, 0x01	; 1
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ec 0f       	add	r30, r28
 1c8:	fd 1f       	adc	r31, r29
 1ca:	e4 0f       	add	r30, r20
 1cc:	f5 1f       	adc	r31, r21
 1ce:	20 81       	ld	r18, Z
 1d0:	82 2f       	mov	r24, r18
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	22 1f       	adc	r18, r18
 1da:	22 27       	eor	r18, r18
 1dc:	22 1f       	adc	r18, r18
 1de:	82 2b       	or	r24, r18
 1e0:	80 83       	st	Z, r24
			}
		}
		
		
		if(shift == 4){
			for(int i = 0; i < 7; i++){
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	5f 4f       	sbci	r21, 0xFF	; 255
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <renderImage+0x146>
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	47 30       	cpi	r20, 0x07	; 7
 1ee:	51 05       	cpc	r21, r1
 1f0:	44 f3       	brlt	.-48     	; 0x1c2 <renderImage+0x11c>
				rowSetup[i] = (rowSetup[i] << 1 | rowSetup[i] >> 7);
			}
		}
		
		if(shift == 5){
 1f2:	05 30       	cpi	r16, 0x05	; 5
 1f4:	11 05       	cpc	r17, r1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <renderImage+0x154>
 1f8:	69 cf       	rjmp	.-302    	; 0xcc <renderImage+0x26>
 1fa:	22 c0       	rjmp	.+68     	; 0x240 <renderImage+0x19a>
			for(int i = 0; i < 7; i++){
				rowSetup[i] = (rowSetup[i] << 1 | rowSetup[i] >> 7);
 1fc:	e1 e0       	ldi	r30, 0x01	; 1
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	e8 0f       	add	r30, r24
 206:	f9 1f       	adc	r31, r25
 208:	40 81       	ld	r20, Z
 20a:	24 2f       	mov	r18, r20
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	44 1f       	adc	r20, r20
 214:	44 27       	eor	r20, r20
 216:	44 1f       	adc	r20, r20
 218:	24 2b       	or	r18, r20
 21a:	20 83       	st	Z, r18
				colSetup[i] = (colSetup[i] << 1 | colSetup[i] >> 7);
 21c:	e9 e0       	ldi	r30, 0x09	; 9
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 0f       	add	r30, r28
 222:	fd 1f       	adc	r31, r29
 224:	e8 0f       	add	r30, r24
 226:	f9 1f       	adc	r31, r25
 228:	40 81       	ld	r20, Z
 22a:	24 2f       	mov	r18, r20
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	44 1f       	adc	r20, r20
 234:	44 27       	eor	r20, r20
 236:	44 1f       	adc	r20, r20
 238:	24 2b       	or	r18, r20
 23a:	20 83       	st	Z, r18
				rowSetup[i] = (rowSetup[i] << 1 | rowSetup[i] >> 7);
			}
		}
		
		if(shift == 5){
			for(int i = 0; i < 7; i++){
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	02 c0       	rjmp	.+4      	; 0x244 <renderImage+0x19e>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	87 30       	cpi	r24, 0x07	; 7
 246:	91 05       	cpc	r25, r1
 248:	cc f2       	brlt	.-78     	; 0x1fc <renderImage+0x156>
 24a:	40 cf       	rjmp	.-384    	; 0xcc <renderImage+0x26>

0000024c <main>:



int main(void)
{
    	DDRD = 0xFF;
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 250:	87 bb       	out	0x17, r24	; 23

	renderImage(1);
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <renderImage>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
